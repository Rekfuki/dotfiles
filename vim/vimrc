" Define autocmd group vimrc.
augroup myvimrc
  autocmd!
augroup END

call plug#begin('~/dotfiles/vim/plugged')

Plug 'christoomey/vim-tmux-navigator'
Plug 'fatih/molokai'
Plug 'liuchengxu/space-vim-theme'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-dispatch'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'ervandew/supertab'
Plug 'python-mode/python-mode', {'branch': 'develop', 'for': 'python'}
Plug 'pangloss/vim-javascript', {'for': 'javascript'}
Plug 'fatih/vim-go', {'for': 'go', 'do': ':GoUpdateBinaries'}
Plug 'chrisbra/Colorizer', {'on': 'ColorToggle'}
if has('nvim')
    Plug 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'}
    Plug 'deoplete-plugins/deoplete-jedi'
    Plug 'zchee/deoplete-go', {'build': {'unix': 'make'}}
    Plug 'mdempsky/gocode', {'rtp': 'nvim', 'do': '~/dotfiles/vim/plugged/gocode/nvim/symlink.sh'}
    let g:deoplete#enable_at_startup = 1
endif

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Vim-Tmux-Navigator
let g:tmux_navigator_no_mappings = 1

" Supertab
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-n>"

" Pymode
let g:pymode_python = 'python3'
let g:pymode_rope = 0
let g:pymode_rope_goto_definition_cmd = 'vnew'
let g:pymode_folding = 0
let g:pymode_lint_unmodified = 1
let g:pymode_lint_checkers = ['pylint', 'pyflakes', 'pep8', 'mccabe']
" C0111 - Missing docstrings
" W0703 - Cathing too general exception
let g:pymode_lint_ignore = [ "C0111", "W0703", ]

" vim-go
let g:go_auto_type_info = 1
let g:go_addtags_transform = "snakecase"
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_play_open_browser = 1
let g:go_dispatch_enabled = 1
let g:go_def_reuse_buffer = 0
let g:go_metalinter_autosave = 1

" NERDTree settings
map <F2> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$', '\.egg-info$', '__pycache__']

" Colorizer
map <F6> :ColorToggle<CR>
map! <F6> <Esc>:ColorToggle<CR>gi

" space-vim-theme
let g:space_vim_transp_bg = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Python
let g:python_host_prog = '/usr/bin/python'
let g:python3_host_prog = '/usr/bin/python3'

set updatetime=750

let mapleader = "\<Space>"
" Quickly edit dotfiles
nmap <silent> <leader>ev :vsplit $MYVIMRC<CR>
nmap <silent> <leader>et :vsplit ~/.tmux.conf<CR>
nmap <silent> <leader>ed :vsplit ~/.zshrc<CR>
nmap <silent> <leader>ei :vsplit ~/.config/i3/config<CR>
nmap <silent> <leader>r :so $MYVIMRC<CR>

" Raise a dialogue for saving changes
set confirm

" Enable file type detection and plugin loading
filetype plugin indent on

" Use Unix as the standard file type
set ffs=unix,mac,dos

" Set filetype specific options via modelines
set modeline

" Don't open preview on autocompletion
set completeopt-=preview

" Don't select the first completion item; show even if there's only one match
set completeopt+=menuone

" Disable backups
set nobackup
set noswapfile
set nowritebackup

" Ignore these files
set wildignore+=*.pyc,*_build/*,*/coverage/*

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Build our status line
" (inspired by https://github.com/maciakl/vim-neatstatus)
let g:last_mode=""
let g:myvimrc_color_normal   = 'guifg=#1c1c1c guibg=#00d7ff gui=bold ctermfg=234 ctermbg=45  cterm=bold'
let g:myvimrc_color_insert   = 'guifg=#1c1c1c guibg=#00d700 gui=bold ctermfg=234 ctermbg=40  cterm=bold'
let g:myvimrc_color_replace  = 'guifg=#1c1c1c guibg=#d7ff00 gui=bold ctermfg=234 ctermbg=190 cterm=bold'
let g:myvimrc_color_visual   = 'guifg=#1c1c1c guibg=#ffaf00 gui=bold ctermfg=234 ctermbg=214 cterm=bold'
let g:myvimrc_color_paste    = 'guifg=#1c1c1c guibg=#d7afff gui=bold ctermfg=234 ctermbg=183 cterm=bold'
let g:myvimrc_color_filetype = 'guifg=#1c1c1c guibg=#c0c0c0 gui=bold ctermfg=234 ctermbg=7   cterm=bold'

function! SetStatusLineColors()
    exec 'hi User1 '.g:myvimrc_color_normal
    exec 'hi User2 '.g:myvimrc_color_replace
    exec 'hi User3 '.g:myvimrc_color_insert
    exec 'hi User4 '.g:myvimrc_color_visual
    exec 'hi User5 '.g:myvimrc_color_paste
    exec 'hi User6 '.g:myvimrc_color_filetype
endfunc

function! IsPaste()
    if &paste == 1
        return " PASTE "
    else
        return ""
    endif
endfunction

" Convert one-letter status to words
function! VimMode()
    redraw
    let l:mode = mode()
    if mode ==# "n"
        exec 'hi User1 '.g:myvimrc_color_normal
        return "NORMAL"
    elseif mode ==# "i"
        exec 'hi User1 '.g:myvimrc_color_insert
        return "INSERT"
    elseif mode ==# "R"
        exec 'hi User1 '.g:myvimrc_color_replace
        return "REPLACE"
    elseif mode ==# "v"
        exec 'hi User1 '.g:myvimrc_color_visual
        return "VISUAL"
    elseif mode ==# "V"
        exec 'hi User1 '.g:myvimrc_color_visual
        return "V-LINE"
    elseif mode ==# "\<C-v>"
        exec 'hi User1 '.g:myvimrc_color_visual
        return "V-BLOCK"
    else
        return l:mode
    endif
endfunc

if has('statusline')
    call SetStatusLineColors()
    function! SetStatusLineStyle()
        let &stl=""
        " mode (changes color)
        let &stl.="%1* %{VimMode()} %*"
        " add paste if it's toggled
        let &stl.="%5*%{IsPaste()}%*"
        " file path; %< colapses to the left if the window is too small
        let &stl.=" %<%F "
        " read only, modified, modifiable flags in brackets
        let &stl.="%([%R%M]%)"
        " right-aligh everything past this point
        let &stl.="%= "
        " file type (eg. python, ruby, etc..)
        let &stl.="%6* %(%{&filetype}%) %*"
        " file format (eg. unix, dos, etc..)
        let &stl.=" %{&fileformat} "
        " file encoding (eg. utf8, latin1, etc..)
        let &stl.="%6* %(%{(&fenc!=''?&fenc:&enc)} %* %)"
        " line number/total lines:col number"
        let &stl.="%l/%L:%-3.c"
    endfunc
    " whenever the color scheme changes re-apply the colors
    au ColorScheme * call SetStatusLineColors()
    call SetStatusLineStyle()
endif

" Colorscheme
set background=dark
set termguicolors
try
    colors space_vim_theme
catch
endtry

" Enable syntax highlighing
syntax enable

" Open splitpanes below and on the right of the current one.
set splitbelow
set splitright

" Toggle highlighting current line only in active splits
autocmd myvimrc VimEnter,WinEnter,BufWinEnter * setlocal cursorline
autocmd myvimrc WinLeave * setlocal nocursorline

" Set the colored vertical column
set colorcolumn=85

" Highlight current line
set cursorline

" Line numbers
set number
set relativenumber
map <F5> :set relativenumber!<CR>
map! <F5> <Esc>:set relativenumber!<CR>gi

" Regex and search options
set magic

" Temporary turn off hlsearch
nnoremap <silent> <leader><CR> :noh<CR>

" Save files
nmap <leader>w :w<CR>
vmap <leader>w <Esc>:w<CR>gv
" Save with sudo
cmap w!! %!sudo tee > /dev/null %

" Close files (will raise confirmation dialog for unsaved changes)
nmap <leader>q :q<CR>
vmap <leader>q <Esc>:q<CR>gv

" First tab will complete to the longest common string
set wildmode=longest:full,full

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text and formatting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use 4 spaces instead of tabs
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" Use 2 spaces instead of tabs for HTML and YAML files
autocmd myvimrc FileType html,yaml setlocal shiftwidth=2 tabstop=2

" " Use 2 spaces instead of tabs for JS
autocmd myvimrc FileType javascript setlocal shiftwidth=2 tabstop=2 colorcolumn=80

" Wrap lines to 72 characters in git commit messages and use 2 spaces for tab
autocmd myvimrc FileType gitcommit setlocal spell textwidth=72 shiftwidth=2 tabstop=2

" Don't leave space between joined lines
set nojoinspaces

" Fix identation when pasting in Insert mode
set pastetoggle=<F4>

" Sort lines alphabetically
vnoremap <leader>s :sort<CR>

" Go back to visual mode after reindenting
vnoremap < <gv
vnoremap > >gv

" Use double spacebar tab to select the current line
map <leader><leader> V

" Select the last inserted text
nnoremap <leader>le `[v`]

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Navigation and moving around
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Exit insert mode with jj
inoremap jj <Esc>

" Go to the next line in editor for wrapped lines
nnoremap j gj
nnoremap k gk

"Easier navigation through split windows
nnoremap <C-j> <C-w><Down>
nnoremap <C-k> <C-w><Up>
nnoremap <C-l> <C-w><Right>
nnoremap <C-h> <C-w><Left>

nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

" We say 'NO' to arrow keys
nnoremap <Up> <NOP>
nnoremap <Down> <NOP>
nnoremap <Left> <NOP>
nnoremap <Right> <NOP>
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" Remap 0 to go to first non-blank character of the line
map 0 ^

" Remap Y to apply till EOL, just like D and C.
map Y y$
